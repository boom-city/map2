# Pre-Checks Workflow Pseudo Code

## 1. Missing Git Initialization Detection

```
FUNCTION check_for_missing_git_initialization():
    config = load_subrepo_configuration()
    missing_repos = []

    FOR EACH subrepo IN config.subrepos:
        IF directory_exists(subrepo.prefix):
            // Check if .git folder exists to validate git initialization
            IF NOT directory_exists(subrepo.prefix + "/.git"):
                missing_repos.add(subrepo)
        ELSE:
            // Directory doesn't exist, so git is definitely not initialized
            missing_repos.add(subrepo)
    
    RETURN missing_repos
END FUNCTION
```

## 2. Missing Remote Repository Detection

```
FUNCTION check_for_missing_remote_repos():
    config = load_subrepo_configuration()
    remote_list = execute_command("gh repo list boom-city")
    missing_remotes = []
    
    FOR EACH subrepo IN config.subrepos:
        IF subrepo.remote_name NOT IN remote_list:
            missing_remotes.add(subrepo)
    
    RETURN missing_remotes
END FUNCTION
```

## 3. Remote Repository Creation

```
FUNCTION create_remote_repo(subrepo):
    TRY:
        execute_command("gh repo create boom-city/" + subrepo.remote_name)
        execute_command("gh label create automated -R boom-city/" + subrepo.remote_name + 
                       " --color 0000FF --description 'Label for GitHub Actions'")
        RETURN true
    CATCH error:
        log_error("Failed to create remote repo: " + subrepo.remote_name + " - " + error)
        RETURN false
END FUNCTION
```

```
FUNCTION create_missing_remote_repos():
    missing_remotes = check_for_missing_remote_repos()
    success_count = 0
    
    FOR EACH remote IN missing_remotes:
        IF create_remote_repo(remote):
            success_count += 1
            log_info("Successfully created remote repo: " + remote.remote_name)
        ELSE:
            log_error("Failed to create remote repo: " + remote.remote_name)
            RETURN failure_result("Failed to create remote repository")
    
    RETURN success_result("Created " + success_count + " remote repositories")
END FUNCTION
```

## 4. Git Initialization

```
FUNCTION initialize_git_repo(subrepo):
    TRY:
        change_directory(subrepo.prefix)
        execute_command("git init")
        execute_command("git branch -m main")
        execute_command("git remote add origin " + subrepo.remote_url)
        RETURN true
    CATCH error:
        log_error("Failed to initialize git in: " + subrepo.prefix + " - " + error)
        RETURN false
END FUNCTION
```

```
FUNCTION create_missing_git_initializations():
    missing_repos = check_for_missing_git_initialization()
    success_count = 0
    
    FOR EACH repo IN missing_repos:
        IF initialize_git_repo(repo):
            success_count += 1
            log_info("Successfully initialized git in: " + repo.prefix)
        ELSE:
            log_error("Failed to initialize git in: " + repo.prefix)
            RETURN failure_result("Failed to initialize git repository")
    
    RETURN success_result("Initialized git in " + success_count + " repositories")
END FUNCTION
```

## 5. Main Pre-Checks Workflow

```
FUNCTION main_pre_checks_workflow():
    log_info("Starting pre-checks workflow...")
    
    // Step 1: Create missing remote repositories
    remote_result = create_missing_remote_repos()
    IF remote_result.status == "failure":
        RETURN remote_result
    
    // Step 2: Initialize missing git repositories
    git_result = create_missing_git_initializations()
    IF git_result.status == "failure":
        RETURN git_result
    
    log_info("Pre-checks workflow completed successfully")
    RETURN success_result("All pre-checks completed successfully")
END FUNCTION
```
