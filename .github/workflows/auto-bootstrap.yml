name: Auto-Bootstrap New Resources

on:
  push:
    branches:
      - main
      - master
    paths:
      - '.github/subrepo-config.json'
      - 'resources/**'

  # Also run on schedule to catch any missed changes
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours

  workflow_dispatch:
    inputs:
      force_bootstrap:
        description: 'Force bootstrap all repositories'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

jobs:
  detect-needs-bootstrap:
    runs-on: ubuntu-latest
    name: Detect if bootstrap is needed
    outputs:
      needs_bootstrap: ${{ steps.check.outputs.needs_bootstrap }}
      missing_repos: ${{ steps.check.outputs.missing_repos }}
      new_configs: ${{ steps.check.outputs.new_configs }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ env.GH_TOKEN }}

      - name: Check if bootstrap is needed
        id: check
        run: |
          CONFIG_FILE=".github/subrepo-config.json"
          NEEDS_BOOTSTRAP=false
          MISSING_REPOS=()
          NEW_CONFIGS=false

          echo "Checking if bootstrap is needed..."

          # Check if config file was modified
          if git diff --name-only HEAD~1 HEAD | grep -q "$CONFIG_FILE"; then
            echo "✓ Configuration file was modified"
            NEW_CONFIGS=true
            NEEDS_BOOTSTRAP=true
          fi

          # Check for new resource directories
          if git diff --name-only HEAD~1 HEAD | grep -q "^resources/"; then
            echo "✓ Resource files were modified"
            NEEDS_BOOTSTRAP=true
          fi

          # Check for missing local directories or remote repositories
          echo "Checking for missing repositories..."
          while IFS= read -r subrepo; do
            prefix=$(echo "$subrepo" | jq -r '.prefix')
            remote=$(echo "$subrepo" | jq -r '.remote')

            # Check if local directory exists and has content
            if [ ! -d "$prefix" ] || [ -z "$(ls -A "$prefix" 2>/dev/null)" ]; then
              echo "Missing local directory: $prefix"
              MISSING_REPOS+=("$prefix")
              NEEDS_BOOTSTRAP=true
            fi

            # Check if remote repository exists
            repo_owner=$(echo "$remote" | sed -E 's|.*github\.com[:/]([^/]+)/.*|\1|')
            repo_name=$(echo "$remote" | sed -E 's|.*/([^/]+)\.git$|\1|')

            if ! gh repo view "$repo_owner/$repo_name" &>/dev/null; then
              echo "Missing remote repository: $repo_owner/$repo_name"
              MISSING_REPOS+=("$prefix")
              NEEDS_BOOTSTRAP=true
            fi
          done < <(jq -c '.subrepos[]' "$CONFIG_FILE")

          # Force bootstrap if requested
          if [ "${{ github.event.inputs.force_bootstrap }}" = "true" ]; then
            echo "✓ Force bootstrap requested"
            NEEDS_BOOTSTRAP=true
          fi

          # Output results
          echo "needs_bootstrap=$NEEDS_BOOTSTRAP" >> $GITHUB_OUTPUT
          echo "new_configs=$NEW_CONFIGS" >> $GITHUB_OUTPUT

          # Convert array to JSON (compact format for GitHub Actions)
          if [ ${#MISSING_REPOS[@]} -gt 0 ]; then
            MISSING_JSON=$(printf '%s\n' "${MISSING_REPOS[@]}" | jq -R . | jq -s -c .)
            echo "missing_repos=$MISSING_JSON" >> $GITHUB_OUTPUT
          else
            echo "missing_repos=[]" >> $GITHUB_OUTPUT
          fi

          echo "Bootstrap needed: $NEEDS_BOOTSTRAP"
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

  auto-bootstrap:
    needs: detect-needs-bootstrap
    if: needs.detect-needs-bootstrap.outputs.needs_bootstrap == 'true'
    runs-on: ubuntu-latest
    name: Automatic bootstrap

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ env.GH_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions [Auto-Bootstrap]"
          git config --global user.email "actions@github.com"

      - name: Create missing remote repositories
        if: needs.detect-needs-bootstrap.outputs.new_configs == 'true'
        run: |
          echo "Creating missing remote repositories..."
          CONFIG_FILE=".github/subrepo-config.json"

          jq -c '.subrepos[]' "$CONFIG_FILE" | while IFS= read -r subrepo; do
            remote=$(echo "$subrepo" | jq -r '.remote')
            prefix=$(echo "$subrepo" | jq -r '.prefix')

            repo_owner=$(echo "$remote" | sed -E 's|.*github\.com[:/]([^/]+)/.*|\1|')
            repo_name=$(echo "$remote" | sed -E 's|.*/([^/]+)\.git$|\1|')

            if ! gh repo view "$repo_owner/$repo_name" &>/dev/null; then
              echo "Creating repository: $repo_owner/$repo_name"

              gh repo create "$repo_owner/$repo_name" \
                --private \
                --description "Auto-created subrepo for $prefix" \
                || echo "Failed to create $repo_owner/$repo_name"
            else
              echo "Repository already exists: $repo_owner/$repo_name"
            fi
          done
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

      - name: Bootstrap missing repositories
        run: |
          CONFIG_FILE=".github/subrepo-config.json"
          SUCCESS_COUNT=0
          ERROR_COUNT=0

          echo "Starting automatic bootstrap process..."

          bootstrap_repo() {
            local prefix="$1"
            local remote="$2"
            local branch="$3"

            echo "Processing: $prefix"

            # Skip if directory exists and has content (unless force)
            if [ -d "$prefix" ] && [ "$(ls -A "$prefix" 2>/dev/null)" ] && [ "${{ github.event.inputs.force_bootstrap }}" != "true" ]; then
              echo "✓ $prefix already exists with content, skipping"
              return 0
            fi

            # Create directory
            mkdir -p "$prefix"

            # Try to clone from remote
            TEMP_DIR=$(mktemp -d)
            if git clone --depth 1 --branch "$branch" "$remote" "$TEMP_DIR" 2>/dev/null; then
              # Copy content to target directory
              rm -rf "$prefix"
              mv "$TEMP_DIR" "$prefix"
              rm -rf "$prefix/.git"
              echo "✓ Cloned $prefix from remote"
              ((SUCCESS_COUNT++))
            else
              # Create empty structure if remote doesn't exist or clone fails
              mkdir -p "$prefix"
              echo "# $prefix" > "$prefix/README.md"
              echo "⚠ Created empty structure for $prefix (remote not accessible)"
              ((SUCCESS_COUNT++))
            fi
          }

          # Process all repositories
          while IFS= read -r subrepo; do
            prefix=$(echo "$subrepo" | jq -r '.prefix')
            remote=$(echo "$subrepo" | jq -r '.remote')
            branch=$(echo "$subrepo" | jq -r '.branch')

            bootstrap_repo "$prefix" "$remote" "$branch" &

            # Limit parallel jobs
            if (( $(jobs -r | wc -l) >= 10 )); then
              wait
            fi
          done < <(jq -c '.subrepos[]' "$CONFIG_FILE")

          # Wait for remaining jobs
          wait

          echo "Bootstrap complete - Success: $SUCCESS_COUNT, Errors: $ERROR_COUNT"

      - name: Commit bootstrapped changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add -A

            # Create detailed commit message
            COMMIT_MSG="chore: auto-bootstrap new resources"

            if [ "${{ needs.detect-needs-bootstrap.outputs.new_configs }}" = "true" ]; then
              COMMIT_MSG="$COMMIT_MSG"$'\n\n'"- Configuration changes detected"
            fi

            if [ "${{ needs.detect-needs-bootstrap.outputs.missing_repos }}" != "[]" ]; then
              COMMIT_MSG="$COMMIT_MSG"$'\n'"- Missing repositories initialized"
            fi

            COMMIT_MSG="$COMMIT_MSG"$'\n\n'"🤖 Auto-generated by bootstrap automation"
            COMMIT_MSG="$COMMIT_MSG"$'\n'"[skip ci]"

            git commit -m "$COMMIT_MSG"
            git push origin main

            echo "✅ Changes committed and pushed"
          else
            echo "ℹ️ No changes to commit"
          fi

      - name: Trigger push workflow for new content
        if: success()
        run: |
          echo "Triggering push workflow to sync new repositories..."
          gh workflow run push-subrepos.yml \
            --field commit_range="HEAD~1..HEAD"
        env:
          GH_TOKEN: ${{ env.GH_TOKEN }}

  summary:
    needs: [detect-needs-bootstrap, auto-bootstrap]
    if: always()
    runs-on: ubuntu-latest
    name: Bootstrap summary

    steps:
      - name: Create summary
        run: |
          echo "# Auto-Bootstrap Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Actor:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.detect-needs-bootstrap.outputs.needs_bootstrap }}" = "true" ]; then
            echo "## ✅ Bootstrap Executed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **New configs detected:** ${{ needs.detect-needs-bootstrap.outputs.new_configs }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Missing repos:** ${{ needs.detect-needs-bootstrap.outputs.missing_repos }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Bootstrap status:** ${{ needs.auto-bootstrap.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ℹ️ No Bootstrap Needed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All repositories are up to date." >> $GITHUB_STEP_SUMMARY
          fi