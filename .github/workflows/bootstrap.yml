name: Bootstrap Subrepos

on:
  workflow_dispatch:
    inputs:
      force:
        description: 'Force re-clone all subrepos'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

  # Trigger on initial clone
  create:

  # Allow manual trigger from GitHub UI
  repository_dispatch:
    types: [bootstrap]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}

jobs:
  bootstrap:
    runs-on: ubuntu-latest
    name: Bootstrap all subrepos

    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ env.GH_TOKEN }}

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Parse subrepo configuration
        id: parse_config
        run: |
          echo "Parsing subrepo configuration..."
          SUBREPO_COUNT=$(jq '.subrepos | length' .github/subrepo-config.json)
          echo "Found $SUBREPO_COUNT subrepos to manage"
          echo "subrepo_count=$SUBREPO_COUNT" >> $GITHUB_OUTPUT

      - name: Create bootstrap script
        run: |
          cat > bootstrap-subrepos.sh << 'EOF'
          #!/bin/bash
          set -e

          FORCE_CLONE="${{ github.event.inputs.force }}"
          CONFIG_FILE=".github/subrepo-config.json"
          ERRORS_FILE="bootstrap-errors.log"
          SUCCESS_COUNT=0
          SKIP_COUNT=0
          ERROR_COUNT=0

          # Clear error log
          > "$ERRORS_FILE"

          echo "Starting bootstrap process..."
          echo "Force clone: $FORCE_CLONE"

          # Function to clone or update a subrepo
          bootstrap_subrepo() {
              local prefix="$1"
              local remote="$2"
              local branch="$3"

              echo "----------------------------------------"
              echo "Processing: $prefix"
              echo "Remote: $remote"
              echo "Branch: $branch"

              # Check if directory exists and has content
              if [ -d "$prefix" ] && [ "$(ls -A "$prefix" 2>/dev/null)" ] && [ "$FORCE_CLONE" != "true" ]; then
                  echo "✓ Directory exists and has content, skipping..."
                  ((SKIP_COUNT++))
                  return 0
              fi

              # Create directory if it doesn't exist
              mkdir -p "$prefix"

              # Clone the repository
              if ! git clone --branch "$branch" --single-branch "$remote" "$prefix.tmp" 2>>"$ERRORS_FILE"; then
                  echo "✗ Failed to clone repository"
                  echo "Error cloning $remote to $prefix" >> "$ERRORS_FILE"
                  ((ERROR_COUNT++))
                  rm -rf "$prefix.tmp"
                  return 1
              fi

              # Move contents to target directory
              if [ -d "$prefix.tmp" ]; then
                  rm -rf "$prefix"
                  mv "$prefix.tmp" "$prefix"

                  # Remove .git directory to integrate with monorepo
                  rm -rf "$prefix/.git"

                  echo "✓ Successfully cloned and integrated"
                  ((SUCCESS_COUNT++))
              else
                  echo "✗ Clone succeeded but directory not found"
                  ((ERROR_COUNT++))
                  return 1
              fi
          }

          # Process all subrepos in parallel batches
          export -f bootstrap_subrepo
          export FORCE_CLONE
          export ERRORS_FILE

          # Read configuration and process each subrepo
          TOTAL=$(jq -r '.subrepos | length' "$CONFIG_FILE")
          CURRENT=0

          # Process in batches of 10 for parallel execution
          jq -c '.subrepos[]' "$CONFIG_FILE" | while IFS= read -r subrepo; do
              prefix=$(echo "$subrepo" | jq -r '.prefix')
              remote=$(echo "$subrepo" | jq -r '.remote')
              branch=$(echo "$subrepo" | jq -r '.branch')

              ((CURRENT++))
              echo "[$CURRENT/$TOTAL] Processing $prefix"

              bootstrap_subrepo "$prefix" "$remote" "$branch" &

              # Limit parallel jobs to 10
              if [ $((CURRENT % 10)) -eq 0 ]; then
                  wait
              fi
          done

          # Wait for remaining jobs
          wait

          echo "========================================="
          echo "Bootstrap Summary:"
          echo "Total subrepos: $TOTAL"
          echo "Successful: $SUCCESS_COUNT"
          echo "Skipped: $SKIP_COUNT"
          echo "Errors: $ERROR_COUNT"

          if [ "$ERROR_COUNT" -gt 0 ]; then
              echo "Errors encountered during bootstrap:"
              cat "$ERRORS_FILE"
              exit 1
          fi
          EOF
          chmod +x bootstrap-subrepos.sh

      - name: Run bootstrap process
        run: |
          ./bootstrap-subrepos.sh
        continue-on-error: true

      - name: Verify bootstrap results
        run: |
          echo "Verifying bootstrap results..."
          TOTAL=$(jq -r '.subrepos | length' .github/subrepo-config.json)
          FOUND=0

          jq -c '.subrepos[]' .github/subrepo-config.json | while IFS= read -r subrepo; do
              prefix=$(echo "$subrepo" | jq -r '.prefix')
              if [ -d "$prefix" ] && [ "$(ls -A "$prefix")" ]; then
                  ((FOUND++))
              else
                  echo "⚠ Missing or empty: $prefix"
              fi
          done

          echo "Verified $FOUND out of $TOTAL subrepos"

      - name: Commit changes if any
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git add -A
            git commit -m "chore: bootstrap subrepos [skip ci]" || echo "No changes to commit"
            git push origin main || echo "Failed to push changes"
          else
            echo "No changes detected after bootstrap"
          fi

      - name: Create bootstrap summary
        if: always()
        run: |
          cat > bootstrap-summary.md << 'EOF'
          # Bootstrap Summary

          **Date:** $(date)
          **Triggered by:** ${{ github.actor }}
          **Force clone:** ${{ github.event.inputs.force }}

          ## Results
          See logs for detailed information.

          EOF

          if [ -f bootstrap-errors.log ] && [ -s bootstrap-errors.log ]; then
            echo "## Errors" >> bootstrap-summary.md
            echo '```' >> bootstrap-summary.md
            cat bootstrap-errors.log >> bootstrap-summary.md
            echo '```' >> bootstrap-summary.md
          fi

      - name: Upload bootstrap summary
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: bootstrap-summary
          path: |
            bootstrap-summary.md
            bootstrap-errors.log